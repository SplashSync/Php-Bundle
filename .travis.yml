################################################################################
# Project language
language: php
# Allows use container-based infrastructure
sudo: false
#sudo: required
dist: trusty

################################################################################
# Start mysql service
services:
  - mysql

################################################################################
# Cache composer packages so "composer install" is faster
cache:
    directories:
        - $HOME/.composer/cache/files

################################################################################
# Define an environment variable
env:
    global:
        - SYMFONY_DEPRECATIONS_HELPER=disabled
        
################################################################################
# Define Test Matrix
matrix:
    include:          
#        # Symfony 3.3 Branch       
#        - php: 7.0
#          env: SF_VERSION="3.3.*"        
#        - php: 7.1
#          env: SF_VERSION="3.3.*"        
          
        # Symfony 3.4 Branch       
        - php: 7.1
          env: SF_VERSION="3.4.*"        
#        - php: 7.2
#          env: SF_VERSION="3.4.*"        
#          
#        # Symfony 4.0 Branch       
#        - php: 7.1
#          env: SF_VERSION="4.0.*"  STABILITY="dev"   
#        - php: 7.2
#          env: SF_VERSION="4.0.*"  STABILITY="dev"        
        
    allow_failures:
        - env: SF_VERSION="4.0.*"  STABILITY="dev"       
        
    # Fast finish allows to set the build as "finished" even if the "allow_failures" matrix elements are not finished yet.
    fast_finish: true

################################################################################
# Prepare Test Environement
before_install:
    # Update composer
    - composer self-update
    # Setup Travis PHP     
    - if [ "$TRAVIS_PHP_VERSION" != "hhvm" ]; then echo "memory_limit = -1" >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/travis.ini; fi
#    # Setup Composer Stability if Required   
#    - if ! [ -z "$STABILITY" ]; then composer config minimum-stability ${STABILITY}; fi;
    # Setup Symfony Version if Required    
    - if [ "$SF_VERSION" != "" ]; then composer require --no-update symfony/symfony=$SF_VERSION; fi;
    # With PHP 7 => Load Phpstan   
    - if [[ ${TRAVIS_PHP_VERSION:0:1} == "7" ]]; then composer require phpstan/phpstan-shim --no-update; fi    
    # Create Database
    - mysql -e 'CREATE DATABASE IF NOT EXISTS symfony;'
      
################################################################################
# Install composer dependencies,
# Create database, schema and fixtures
install:   
    - echo "Build Dependencies"
    - composer update  --prefer-dist --no-interaction  

    - echo "Configuring The Bundles"
    - cp app/config/parameters.yml.dist app/config/parameters.yml
    
    - echo "Install Symfony"
    - php bin/console doctrine:schema:update --force  --no-interaction --no-debug

    - echo "Start Web Server"
    - php bin/console server:start -d web
    

################################################################################
# Run script
script:
    
    # Execute Grump Travis Testsuite 
    - php bin/grumphp run --testsuite=travis
    
    # With PHP 7 => Execute Grump Phpstan Testsuite 
    - if [[ ${TRAVIS_PHP_VERSION:0:1} == "7" ]]; then php bin/grumphp run --testsuite=phpstan; fi  
    
    # Execute PhpUnit Tests 
    - phpunit
    
    
# After a build, send email notification with the build results
notifications:
  email:         
    on_success: never # default: change
    on_failure: never # default: always